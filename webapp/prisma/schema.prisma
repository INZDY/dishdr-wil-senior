// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Symptom {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model User {
  id             String        @id @default(cuid(2))
  name           String?
  DOB            DateTime?
  height         Float?
  weight         Float?
  email          String?
  phone          String?
  chronicDisease String?
  allergies      String?
  Appointments   Appointment[]

  // Account Account[]
  // Session Session[]

  role      String   @default("patient")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Appointment {
  id         String   @id @default(cuid(2))
  patient    User     @relation(fields: [patientId], references: [id])
  patientId  String
  department String?
  dateTime   DateTime
  notes      String?

  status     String
  prediction String?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  symptoms   AppointmentSymptoms[]
}

model AppointmentSymptoms {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  type          String
  symptom       String
  duration      Int?
  unit          String?
  hasSymptom    Boolean     @default(true)
  isOther       Boolean     @default(false)
}
