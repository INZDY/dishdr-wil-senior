// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Symptom {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  enabled Boolean @default(true)
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  enabled      Boolean        @default(true)
  Availability Availability[]
}

model Availability {
  id           Int        @id @default(autoincrement())
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  dayOfWeek    Int
  enabled      Boolean    @default(true)

  @@unique([departmentId, dayOfWeek])
}

model TimeSlot {
  id        Int    @id @default(autoincrement())
  dayOfWeek String
  dayIndex  Int
  startTime String
  endTime   String
}

model User {
  id            String        @id @default(cuid(2))
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  sessions      Session[]
  role          String        @default("patient")
  profile       Profile[]
  appointments  Appointment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Profile {
  id             String    @id @default(cuid(2))
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  name           String?
  dob            DateTime?
  height         Float?
  weight         Float?
  email          String?
  phone          String?
  chronicDisease String?
  allergies      String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id              String                @id @default(cuid(2))
  appointmentName String
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  name            String?
  hn              String?
  dob             DateTime?
  height          Float?
  weight          Float?
  email           String?
  phone           String?
  chronicDisease  String?
  allergies       String?
  department      String                @default("-")
  dateTime        DateTime
  dateOnly        String                @default("")
  notes           String?
  status          String
  prediction      String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  symptoms        AppointmentSymptoms[]
}

model AppointmentSymptoms {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  type          String
  symptom       String
  duration      Int?
  unit          String?
  hasSymptom    Boolean     @default(true)
  isOther       Boolean     @default(false)
}
